/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sims.ui;

import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import sims.database.DatabaseConnector;
import sims.helper.Validator;
import sims.model.DASSubjects;
import sims.model.DCSComSciSubjects;
import sims.model.DOCSubjects;
import sims.model.DOEMajorMathSubjects;
import sims.Abstract.DefaultSubject;
import sims.model.DCSInformationTechSubjects;
import sims.model.DOEMajorEnglishSubjects;
import sims.model.Email;
import sims.model.Fee;
import sims.model.StudentSubject;

/**
 *
 * @author johnc
 */
public class SignUpFrame extends javax.swing.JFrame {

    /**
     * Creates new form LoginFrame
     */
    public SignUpFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        signUpLabel = new javax.swing.JLabel();
        iconLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        lastNameLabel = new javax.swing.JLabel();
        lastNameField = new javax.swing.JTextField();
        studentNumberLabel = new javax.swing.JLabel();
        studentNumberField = new javax.swing.JTextField();
        signUpButton = new javax.swing.JButton();
        departmentLabel = new javax.swing.JLabel();
        departmentComboBox = new javax.swing.JComboBox<>();
        yearLevelLabel = new javax.swing.JLabel();
        yearLevelComboBox = new javax.swing.JComboBox<>();
        currentSemLabel = new javax.swing.JLabel();
        currentSemComboBox = new javax.swing.JComboBox<>();
        sectionLabel = new javax.swing.JLabel();
        sectionComboBox = new javax.swing.JComboBox<>();
        sexLabel = new javax.swing.JLabel();
        sexComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sign Up");

        signUpLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        signUpLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        signUpLabel.setText("Sign Up");
        signUpLabel.setAlignmentX(0.5F);

        iconLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconLabel.setIcon(new javax.swing.ImageIcon(System.getProperty("user.dir") + "\\src\\sims\\assets\\student.png"));

        firstNameLabel.setLabelFor(firstNameField);
        firstNameLabel.setText("First Name");

        lastNameLabel.setLabelFor(lastNameField);
        lastNameLabel.setText("Last Name");

        studentNumberLabel.setLabelFor(studentNumberField);
        studentNumberLabel.setText("Student  Number");

        signUpButton.setText("Sign Up");
        signUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signUpButtonActionPerformed(evt);
            }
        });

        departmentLabel.setLabelFor(departmentComboBox);
        departmentLabel.setText("Department");

        departmentComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DAS", "DCS-IT", "DCS-CS", "DOC", "DOE-EN", "DOE-MATH" }));

        yearLevelLabel.setLabelFor(departmentComboBox);
        yearLevelLabel.setText("Year Level");

        yearLevelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));

        currentSemLabel.setLabelFor(departmentComboBox);
        currentSemLabel.setText("Current Sem");

        currentSemComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2" }));

        sectionLabel.setLabelFor(departmentComboBox);
        sectionLabel.setText("Section");

        sectionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));

        sexLabel.setLabelFor(departmentComboBox);
        sexLabel.setText("Sex");

        sexComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(signUpLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(signUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(departmentLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(departmentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(iconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(studentNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(148, 148, 148))
                    .addComponent(studentNumberField)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lastNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(182, 182, 182))
                    .addComponent(lastNameField)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(firstNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(181, 181, 181))
                    .addComponent(firstNameField)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(yearLevelLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(yearLevelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(currentSemLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(currentSemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sectionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sexLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sexComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(signUpLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(iconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(firstNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lastNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(studentNumberLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(studentNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sexLabel)
                    .addComponent(sexComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(departmentLabel)
                    .addComponent(departmentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearLevelLabel)
                    .addComponent(yearLevelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sectionLabel)
                    .addComponent(sectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentSemLabel)
                    .addComponent(currentSemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(signUpButton)
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void signUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signUpButtonActionPerformed
        var validator = new Validator();

        if (!validator.isValidText(firstNameField.getText())) {
            Modal.show("First Name must be valid.", "Invalid First Name", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (!validator.isValidText(lastNameField.getText())) {
            Modal.show("Last Name must be valid.", "Invalid Last Name", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // TODO: add max length of student num
        if (!studentNumberField.getText().matches("[0-9]+")) {
            Modal.show("Student Number must only be numbers.", "Invalid Student Number", JOptionPane.WARNING_MESSAGE);
            return;
        }

        var email = new Email(firstNameField.getText(), lastNameField.getText(), departmentComboBox.getSelectedItem().toString());
        System.out.println(email.showInfo());
        
        String studentQuery = "INSERT INTO student (firstName,lastName,department,studentNumber,email,password,yearLevel,section,currentSem,sex) VALUES('%s','%s','%s','%s','%s','%s','%s','%s','%s','%s')"
                .formatted(email.getFirstName(),
                        email.getLastName(),
                        email.getDepartment(),
                        studentNumberField.getText(),
                        email.getEmail(),
                        email.getPassword(),
                        yearLevelComboBox.getSelectedItem().toString(),
                        sectionComboBox.getSelectedItem().toString(),
                        currentSemComboBox.getSelectedItem().toString(),
                        sexComboBox.getSelectedItem().toString());

        try (var conn = DatabaseConnector.getConnection(); var insertStudentStmt = conn.prepareStatement(studentQuery)) {

            int rowsInserted = insertStudentStmt.executeUpdate();

            if (rowsInserted > 0) {
                System.out.println("Student inserted into the Database.");
                Modal.show("Success, you can now login. The password is in your clipboard.", "Login Success", JOptionPane.INFORMATION_MESSAGE);
                Toolkit.getDefaultToolkit()
                        .getSystemClipboard()
                        .setContents(new StringSelection(email.getPassword()), null);

                var keys = insertStudentStmt.getGeneratedKeys();

                if (keys.next()) {
                    int id = keys.getInt(1);
                    System.out.println("Inserted id: " + id);

                    String studentInfoQuery = "INSERT INTO student_info (studentId) VALUES (%d)".formatted(id);
                    var insertStudentInfoStmt = conn.prepareStatement(studentInfoQuery);

                    int insertedStudentInfoRows = insertStudentInfoStmt.executeUpdate();

                    if (insertedStudentInfoRows > 0) {
                        System.out.println("Student Info was INSERTED into the Database.");
                    } else {
                        System.out.println("Student Info was NOT INSERTED into the Database");
                    }

                    insertStudentInfoStmt.close();
                    
                    //==========================================================
                    // INSERT DEEFAULT SUBJECTS
                    //==========================================================
                    String yearLevel = yearLevelComboBox.getSelectedItem().toString();
                    String currentSem = currentSemComboBox.getSelectedItem().toString();
                    String department = email.getDepartment().toUpperCase();
                    
                    insertSubjectsBasedOnDepartment(id, department, yearLevel, currentSem, conn);
                    
                    //==========================================================
                    // INSERT DEEFAULT FEES
                    //==========================================================
                    
                    // FOR NOW, ALL HAVE SOCIETY FEES
                    String nextMonth = LocalDate.now().plusMonths(1).toString();
                    var socFee = new Fee("Society Fee",nextMonth,150);
                    
                    String insertSocFeeQuery = "INSERT INTO fee (studentId,title,isPending,amount,dueDate) VALUES (%d,'%s','%d','%f','%s')"
                            .formatted(id,socFee.getTitle(),socFee.getIsPending() ? 1 : 0,socFee.getAmount(),socFee.getDueDate());
                    
                    var insertSocFeeStmt = conn.prepareStatement(insertSocFeeQuery);
                    
                    int insertedSocFeeRows = insertSocFeeStmt.executeUpdate();
                    
                    System.out.println("INSERTED %d FEE".formatted(insertedSocFeeRows));
                    insertSocFeeStmt.close();

                }
                this.dispose();
            }

        } catch (SQLException | ClassNotFoundException ex) {
            String message = ex.getMessage().contains("Duplicate") ? "Student Number is already taken." : "Something went wrong";
            Modal.show(message, "Error", JOptionPane.ERROR_MESSAGE);

            Logger.getLogger(SignUpFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_signUpButtonActionPerformed

    private void insertSubjectsBasedOnDepartment(int studentId,String department,String yearLevel, String currentSem, Connection conn) throws SQLException {
        DefaultSubject defaultSubjects;
        List<StudentSubject> subjects = new LinkedList<>();
        
        switch(department) {
            case "DOC" -> {
                defaultSubjects = new DOCSubjects();
                subjects = getSubjectsByYearLevelAndSemester(yearLevel, currentSem, defaultSubjects);
            }
            
            case "DCS-CS" -> {
                defaultSubjects = new DCSComSciSubjects();
                subjects = getSubjectsByYearLevelAndSemester(yearLevel, currentSem, defaultSubjects);
            }
            
            case "DCS-IT" -> {
                defaultSubjects = new DCSInformationTechSubjects();
                subjects = getSubjectsByYearLevelAndSemester(yearLevel, currentSem, defaultSubjects);
            }
            
            case "DAS" -> {
                defaultSubjects = new DASSubjects();
                subjects = getSubjectsByYearLevelAndSemester(yearLevel, currentSem, defaultSubjects);
            }
            
            case "DOE-Math" -> {
                defaultSubjects = new DOEMajorMathSubjects();
                subjects = getSubjectsByYearLevelAndSemester(yearLevel, currentSem, defaultSubjects);
            }
            case "DOE-EN" -> {
                defaultSubjects = new DOEMajorEnglishSubjects();
                subjects = getSubjectsByYearLevelAndSemester(yearLevel, currentSem, defaultSubjects);
            }
        }
        
        int successfulSubjectInsert = 0;
        int failedSubjectInsert = 0;
        for (var subject : subjects) {
            System.out.println(subject);
            String insertSubjectQuery = "INSERT INTO subject (studentId,subjectCode,faculty,subjectTitle,units,semester,yearLevel) VALUES (%d,'%s','%s','%s','%s','%s','%s')"
                    .formatted(studentId,
                            subject.getSubjectCode(),
                            subject.getFaculty(),
                            subject.getSubjectTitle(),
                            subject.getUnits(),
                            subject.getSemester(),
                            subject.getYearLevel());

            var insertSubjectStmt = conn.prepareStatement(insertSubjectQuery);

            int insertedSubjectsRows = insertSubjectStmt.executeUpdate();

            if (insertedSubjectsRows > 0) {
                successfulSubjectInsert++;
            } else {
                failedSubjectInsert++;
            }

            insertSubjectStmt.close();
        }

        System.out.println("""
                            \nSUCCESSFULLY INSERTED %d SUBJECTS
                            WITH %d FAILED INSERTIONS.
                            """.formatted(successfulSubjectInsert, failedSubjectInsert));
    }
    
    private List<StudentSubject> getSubjectsByYearLevelAndSemester(String yearLevel,String currentSem,DefaultSubject defaultSubjects) {
        if (yearLevel.equals("1") && currentSem.equals("1")) return defaultSubjects.getFirstYearFirstSem();
        else if (yearLevel.equals("1") && currentSem.equals("2")) return defaultSubjects.getFirstYearSecondSem();
        else if (yearLevel.equals("2") && currentSem.equals("1")) return defaultSubjects.getSecondYearFirstSem();
        else if (yearLevel.equals("2") && currentSem.equals("2")) return defaultSubjects.getSecondYearSecondSem();
        else if (yearLevel.equals("3") && currentSem.equals("1")) return defaultSubjects.getThirdYearFirstSem();
        else if (yearLevel.equals("3") && currentSem.equals("2")) return defaultSubjects.getThirdYearSecondSem();
        else if (yearLevel.equals("4") && currentSem.equals("1")) return defaultSubjects.getFourthYearFirstSem();
        else if (yearLevel.equals("4") && currentSem.equals("2")) return defaultSubjects.getFourthYearSecondSem();
        else return null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SignUpFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SignUpFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SignUpFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SignUpFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SignUpFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> currentSemComboBox;
    private javax.swing.JLabel currentSemLabel;
    private javax.swing.JComboBox<String> departmentComboBox;
    private javax.swing.JLabel departmentLabel;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JComboBox<String> sectionComboBox;
    private javax.swing.JLabel sectionLabel;
    private javax.swing.JComboBox<String> sexComboBox;
    private javax.swing.JLabel sexLabel;
    private javax.swing.JButton signUpButton;
    private javax.swing.JLabel signUpLabel;
    private javax.swing.JTextField studentNumberField;
    private javax.swing.JLabel studentNumberLabel;
    private javax.swing.JComboBox<String> yearLevelComboBox;
    private javax.swing.JLabel yearLevelLabel;
    // End of variables declaration//GEN-END:variables
}
